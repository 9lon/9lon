"use strict";function _classCallCheck(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,o){for(var a=0;a<o.length;a++){var t=o[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(o,a,t){return a&&e(o.prototype,a),t&&e(o,t),o}}();!function(){var e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"beforeRegister",value:function(){this.is="glon-system",this.properties={role:{type:Object,value:[{path:"app1/page1",role:["admin","manager","user1"]}]}}}},{key:"created",value:function(){window.gl.glonSystem=document.querySelector("glon-system"),"undefined"==typeof localStorage.glLanguage&&localStorage.setItem("glLanguage",glonInit.language);var e=jwt_decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiVXNlcjEiLCJyb2xlIjoiYWRtaW4ifQ.oRx_ieJoxSZPv7Y8lM03Qv8Qb24PVmuFpWBUxWEkBcg");this.auth=e}},{key:"_routePageChanged",value:function(e){var o=this,a={};if("/"==e.path){var t=glonInit.indexPath.split("/");a={app:t[1],page:t[2]}}else a="undefined"==typeof e.path.split("/")[2]?{app:"error",page:"404"}:this.routeData;var l=function(){var e=document.createElement(a.app+"-"+a.page);e.route=a,o.getLocales(o.layout,a.app,function(t){if(window.mergeLocales=t,o.layout!=o.oldLayout){var l=function(){var t=o.$$("tag-app-load");t.innerHTML="";var l=document.createElement(o.layout);l.route=a,l.page=e,t.appendChild(l)};glonInit.layout!=o.layout?o.importHref(o.resolveUrl("/src/template/"+o.layout+"/"+o.layout+".html"),function(e){l()},function(e){o.changePath("/error/404")},!0):l()}else if("undefined"==typeof o.layout){var n=o.$$("tag-app-load");n.innerHTML="",n.appendChild(e)}else{var n=o.$$("tag-app-load>"+o.layout);n.route=a,n.page=e}o.oldLayout=o.layout})};this.checkRole(a)&&(a={app:"error",page:"403"}),this.importHref(this.resolveUrl("/src/apps/"+a.app+"/"+a.page+".html"),function(e){l()},function(e){a={app:"error",page:"404"},o.importHref(o.resolveUrl("/src/apps/"+a.app+"/"+a.page+".html"),function(e){l()},null,!0)},!0)}},{key:"changePath",value:function(e){this.$.changePath.setAttribute("href",e),this.$.changePath.click()}},{key:"getLocales",value:function(e,o,a){var t=function(){var t=JSON.parse(JSON.stringify(locales.global));if("undefined"!=typeof locales.layouts[e])for(var l in locales.layouts[e])for(var n in locales.layouts[e][l])t[l][n]=locales.layouts[e][l][n];for(var l in locales.apps[o])for(var n in locales.apps[o][l])t[l][n]=locales.apps[o][l][n];a(t)},l={global:!1,layout:!1,app:!1,loaded:function(e){this[e]=!0,this.global&&this.layout&&this.app&&t()}};"undefined"==typeof locales&&(window.locales={global:null,apps:{},layouts:{}}),null==locales.global?fetch(this.resolveUrl("/src/apps/localize.json")).then(function(e){return 200!==e.status?void console.log("Looks like there was a problem. Status Code: "+e.status):void e.json().then(function(e){locales.global=e,l.loaded("global")})}).catch(function(e){console.log("Fetch Error :-S",e)}):l.loaded("global"),"undefined"==typeof locales.layouts[e]?fetch(this.resolveUrl("/src/template/"+e+"/localize.json")).then(function(o){return 200!==o.status?void console.log("Looks like there was a problem. Status Code: "+o.status):void o.json().then(function(o){locales.layouts[e]=o,l.loaded("layout")})}).catch(function(e){console.log("Fetch Error :-S",e)}):l.loaded("layout"),"undefined"==typeof locales.apps[o]?fetch(this.resolveUrl("/src/apps/"+o+"/localize.json")).then(function(e){return 200!==e.status?void console.log("Looks like there was a problem. Status Code: "+e.status):void e.json().then(function(e){locales.apps[o]=e,l.loaded("app")})}).catch(function(e){console.log("Fetch Error :-S",e)}):l.loaded("app")}},{key:"checkRole",value:function(e){var o=this,a=!0;return this.role.map(function(t,l){t.path==e.app+"/"+e.page?t.role.map(function(e){o.auth.role==e&&(a=!1)}):a=!1}),a}},{key:"observers",get:function(){return["_routePageChanged(route)"]}}]),e}();Polymer(e)}();
//# sourceMappingURL=data:application/json;base64,
