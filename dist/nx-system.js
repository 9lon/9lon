"use strict";window.nxQuerySystem=document.querySelector("nx-system"),window.nxQueryLocalize={},Polymer({is:"nx-system",properties:{role:{type:Object,value:[{path:"app1/page1",role:["admin","manager","user1"]}]}},observers:["_routePageChanged(route)"],created:function(){"undefined"==typeof localStorage.nxLanguage&&localStorage.setItem("nxLanguage",initSystem.language);var a=jwt_decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiVXNlcjEiLCJyb2xlIjoiYWRtaW4ifQ.oRx_ieJoxSZPv7Y8lM03Qv8Qb24PVmuFpWBUxWEkBcg");this.auth=a},_routePageChanged:function(a){var e=this,o={};if("/"==a.path){var t=initSystem.indexPath.split("/");o={app:t[1],page:t[2]}}else o="undefined"==typeof a.path.split("/")[2]?{app:"error",page:"404"}:this.routeData;var l=function(){var a=document.createElement(o.app+"-"+o.page);a.route=o,e.getLocales(e.layout,o.app,function(t){if(window.mergeLocales=t,e.layout!=e.oldLayout)if("layout-main"!=initSystem.layout){var l=function(){var t=e.$$("tag-app-load");t.innerHTML="";var l=document.createElement(e.layout);l.route=o,l.page=a,t.appendChild(l)};e.importHref(e.resolveUrl("/src/template/"+e.layout+"/"+e.layout+".html"),function(a){l()},function(a){e.changePath("/error/404")},!0)}else l();else if("undefined"==typeof e.layout){var n=e.$$("tag-app-load");n.innerHTML="",n.appendChild(a)}else{var n=e.$$("tag-app-load>"+e.layout);n.route=o,n.page=a}e.oldLayout=e.layout})};this.checkRole(o)&&(o={app:"error",page:"403"}),this.importHref(this.resolveUrl("/src/apps/"+o.app+"/"+o.page+".html"),function(a){l()},function(a){o={app:"error",page:"404"},e.importHref(e.resolveUrl("/src/apps/"+o.app+"/"+o.page+".html"),function(a){l()},null,!0)},!0)},changePath:function(a){this.$.changePath.setAttribute("href",a),this.$.changePath.click()},getLocales:function(a,e,o){var t=function(){var t=JSON.parse(JSON.stringify(locales.global));if("undefined"!=typeof locales.layouts[a])for(var l in locales.layouts[a])for(var n in locales.layouts[a][l])t[l][n]=locales.layouts[a][l][n];for(var l in locales.apps[e])for(var n in locales.apps[e][l])t[l][n]=locales.apps[e][l][n];o(t)},l={global:!1,layout:!1,app:!1,loaded:function(a){this[a]=!0,this.global&&this.layout&&this.app&&t()}};"undefined"==typeof locales&&(window.locales={global:null,apps:{},layouts:{}}),null==locales.global?axios.get("/src/apps/localize.json").then(function(a){locales.global=a.data,l.loaded("global")}):l.loaded("global"),"undefined"==typeof locales.layouts[a]?axios.get("/src/template/"+a+"/localize.json").then(function(e){locales.layouts[a]=e.data,l.loaded("layout")}):l.loaded("layout"),"undefined"==typeof locales.apps[e]?axios.get("/src/apps/"+e+"/localize.json").then(function(a){locales.apps[e]=a.data,l.loaded("app")}):l.loaded("app")},checkRole:function(a){var e=this,o=!0;return this.role.map(function(t,l){t.path==a.app+"/"+a.page?t.role.map(function(a){e.auth.role==a&&(o=!1)}):o=!1}),o}});
//# sourceMappingURL=data:application/json;base64,
