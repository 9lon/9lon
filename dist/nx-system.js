"use strict";function _classCallCheck(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,a){for(var t=0;t<a.length;t++){var o=a[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(a,t,o){return t&&e(a.prototype,t),o&&e(a,o),a}}();!function(){window.nxQuerySystem=document.querySelector("nx-system"),window.nxQueryLocalize={};var e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"beforeRegister",value:function(){this.is="nx-system",this.properties={role:{type:Object,value:[{path:"app1/page1",role:["admin","manager","user1"]}]}}}},{key:"created",value:function(){"undefined"==typeof localStorage.nxLanguage&&localStorage.setItem("nxLanguage",initSystem.language);var e=jwt_decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiVXNlcjEiLCJyb2xlIjoiYWRtaW4ifQ.oRx_ieJoxSZPv7Y8lM03Qv8Qb24PVmuFpWBUxWEkBcg");this.auth=e}},{key:"_routePageChanged",value:function(e){var a=this,t={};if("/"==e.path){var o=initSystem.indexPath.split("/");t={app:o[1],page:o[2]}}else t="undefined"==typeof e.path.split("/")[2]?{app:"error",page:"404"}:this.routeData;var l=function(){var e=document.createElement(t.app+"-"+t.page);e.route=t,a.getLocales(a.layout,t.app,function(o){if(window.mergeLocales=o,a.layout!=a.oldLayout)if("layout-main"!=initSystem.layout){var l=function(){var o=a.$$("tag-app-load");o.innerHTML="";var l=document.createElement(a.layout);l.route=t,l.page=e,o.appendChild(l)};a.importHref(a.resolveUrl("/src/template/"+a.layout+"/"+a.layout+".html"),function(e){l()},function(e){a.changePath("/error/404")},!0)}else l();else if("undefined"==typeof a.layout){var n=a.$$("tag-app-load");n.innerHTML="",n.appendChild(e)}else{var n=a.$$("tag-app-load>"+a.layout);n.route=t,n.page=e}a.oldLayout=a.layout})};this.checkRole(t)&&(t={app:"error",page:"403"}),this.importHref(this.resolveUrl("/src/apps/"+t.app+"/"+t.page+".html"),function(e){l()},function(e){t={app:"error",page:"404"},a.importHref(a.resolveUrl("/src/apps/"+t.app+"/"+t.page+".html"),function(e){l()},null,!0)},!0)}},{key:"changePath",value:function(e){this.$.changePath.setAttribute("href",e),this.$.changePath.click()}},{key:"getLocales",value:function(e,a,t){var o=function(){var o=JSON.parse(JSON.stringify(locales.global));if("undefined"!=typeof locales.layouts[e])for(var l in locales.layouts[e])for(var n in locales.layouts[e][l])o[l][n]=locales.layouts[e][l][n];for(var l in locales.apps[a])for(var n in locales.apps[a][l])o[l][n]=locales.apps[a][l][n];t(o)},l={global:!1,layout:!1,app:!1,loaded:function(e){this[e]=!0,this.global&&this.layout&&this.app&&o()}};"undefined"==typeof locales&&(window.locales={global:null,apps:{},layouts:{}}),null==locales.global?axios.get("/src/apps/localize.json").then(function(e){locales.global=e.data,l.loaded("global")}):l.loaded("global"),"undefined"==typeof locales.layouts[e]?axios.get("/src/template/"+e+"/localize.json").then(function(a){locales.layouts[e]=a.data,l.loaded("layout")}):l.loaded("layout"),"undefined"==typeof locales.apps[a]?axios.get("/src/apps/"+a+"/localize.json").then(function(e){locales.apps[a]=e.data,l.loaded("app")}):l.loaded("app")}},{key:"checkRole",value:function(e){var a=this,t=!0;return this.role.map(function(o,l){o.path==e.app+"/"+e.page?o.role.map(function(e){a.auth.role==e&&(t=!1)}):t=!1}),t}},{key:"observers",get:function(){return["_routePageChanged(route)"]}}]),e}();Polymer(e)}();
//# sourceMappingURL=data:application/json;base64,
